let
	toNode = n -> (n, 'given', (), ()),
	value = (n, op, left, right) -> n,

	extractPairs = nodes ->
		nodes > pairs > map ((a,b) -> (a, b, nodes > remove a > remove b)),

	ops = {
		(add, '+'),
		(x -> y -> if (and (neq x 1) (neq y 1)) (mul x y) (), '*'),
		(x -> y -> abs (sub x y), '-'),
		(x -> y -> let
			big = max x y,
			small = min x y
		in
			if (and (big > mod small > eq 0) (neq small 1)) (div small big) (), '/')
	},

	combine = a -> b ->
		ops
			> map ((op,c) -> (op (value a) (value b), c, a, b))
			> filter (not . empty . value),

	step = target -> nodes ->
		let
			solved = filter (node -> eq target (value node)) nodes,
			rec = nodes
				> extractPairs
				> filter ((a,b,rest) -> lt (value a) (value b))
				> map ((a,b,rest) -> map (comb -> (comb, rest)) (combine a b))
				> flatten
				> map (step target)
				> flatten
		in
			if (not < empty solved) solved rec,

	solve = target -> numbers -> numbers > map toNode > step target,

	collect = (v, op, left, right) -> if (empty left)
		{}
		(flatten {collect left, collect right, {(v, op, left, right)}}),

	solutionToString = s ->
		s
			> collect
			> map ((v, op, left, right) ->
				join '' {toString < value left, op, toString < value right, '=', toString v})
			> join ', '
in

solve 1220 {75,25,100,1,5,2}
	> map solutionToString
	> map showt
	> eval
