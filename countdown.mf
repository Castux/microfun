let
	toNode = n -> (n, 'given', (), ()),
	value = (n, op, left, right) -> n,

	extractPairs = nodes ->
		nodes > pairs > map ((a,b) -> (a, b, nodes > remove a > remove b)),

	ops = {
		(add, '+'),
		(x -> y -> if (and (gt 1 x) (gt 1 y)) (mul x y) (), '*'),
		(x -> y -> abs (sub x y), '-'),
		(x -> y -> if (and (gt 1 y) (x > mod y > eq 0)) (x > div y) (), '/')
	},

	combine = a -> b -> let
		big = if (value b > gt (value a)) b a,
		small = if (value b > gt (value a)) a b
	in
		ops
			> map ((op,c) -> (op (value big) (value small), c, big, small))
			> filter (not . empty . value),

	step = target -> nodes ->
		let
			solved = filter (node -> eq target (value node)) nodes,
			rec = nodes
				> extractPairs
				> map ((a,b,rest) -> combine a b > map (flip cons rest))
				> flatten
				> map (step target)
				> flatten
		in
			if (not < empty solved) solved rec,

	solve = target -> numbers ->
		numbers > map toNode > step target,

	collect = (v, op, left, right) -> if (empty left)
		{}
		(flatten {collect left, collect right, {(v, op, left, right)}}),

	solutionToString = s ->
		s
			> collect
			> map ((v, op, left, right) ->
				join '' {toString < value left, op, toString < value right, '=', toString v})
			> join ', ',

	unique = let
		addIfUnique = elem -> list -> if (contains elem list) list (elem,list)
	in
		foldr addIfUnique {}
in

solve 853 {100,25,3,2,4,7}
	> map solutionToString
	> unique
	> sortWith (a -> b -> lt (length a) (length b))
	> map showt
	> eval
