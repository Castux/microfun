-- Some arithmetics

let

divides = n -> x -> n > mod x > eq 0,
divisors = n -> range 1 n > filter (divides n),
digits = reverse . map (mod 10) . takeWhile (gt 0) . iterate (div 10),

isPrime = n -> range 2 (sqrt n) > none (divides n) > and (gte 2 n),
primes = upFrom 1 > filter isPrime,
primeDivisors = [
	1 -> {},
	n -> let
		k = head < drop 1 < divisors n
	in
		(k, n > div k > primeDivisors)
],

primes2 =
	let
		isPrime = n -> primes2 > takeWhile (lte (sqrt n)) > none (divides n),
		primesUpFrom = n -> if (isPrime n)
			(n, primesUpFrom (add 2 n))
			(primesUpFrom (add 2 n))
	in
		(2, primesUpFrom 3),

fibonacci = concat {1,1} (zipWith add fibonacci (tail fibonacci)),

fact = [
	1 -> 1,
	n -> mul n (fact < pred n)
],

pow = exp -> n -> if (gte 1 exp)
	(mul n < pow (pred exp) n)
	1,

pairWith = f -> [
	() -> b -> (),
	(x,xs) -> [
		() -> (),
		b -> concat (map (f x) b) (pairWith f xs b)
	]
],

randomNext = add 1013904223 . mul 1664525,
randomFromSeed = iterate randomNext,

countIf = p -> length . filter p,

span = f -> [
	() -> ((),()),
	(x,xs) -> if (f x)
		(span f xs > [ (left,right) -> ((x,left), right) ])
		((),(x,xs))
]

in

let

numbers = take 10000 < map (mod 20) < randomFromSeed 1,
counts =  map (flip countIf numbers . eq) < range 0 19,

list = head -> tail -> (head,tail),

add3 = a -> b -> c -> sum {a,b,c}

in

stdin > map (showt . flip cons ()) > eval
