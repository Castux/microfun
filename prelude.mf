let

-- Functions

id = x -> x,
compose = f -> g -> x -> f (g x),
flip = f -> x -> y -> f y x,
curry = f -> x -> y -> f (x,y),
uncurry = f -> (x,y) -> f x y,
const = c -> x -> c,

-- Numbers
-- builtin: add, mul, sub, div, mod, sqrt

succ = add 1,
pred = (flip sub) 1,
minus = sub 0,
abs = n -> if (lt n 0) (sub 0 n) n,
max = a -> b -> if (lt a b) b a,
min = a -> b -> if (lt a b) a b,

-- Booleans

if = cond -> t -> f -> cond > [ 1 -> t, 0 -> f ],

and = a -> b -> if a b 0,
or = a -> b -> if a 1 b,
not = [ 0 -> 1, 1 -> 0 ],

-- Comparisons
-- builtin: eq, lt

neq = a -> b -> not (eq a b),
gte = a -> b -> not (lt a b),
gt = a -> b -> not (lte a b),
lte = a -> b -> or (lt a b) (eq a b),

-- Lists

cons = h -> t -> (h,t),

isList = [
	() -> 1,
	(x,xs) -> isList xs,
	n -> 0
],

length = [
	() -> 0,
	(h,t) -> succ (length t)
],

head = (h,t) -> h,
tail = (h,t) -> t,

empty = [ () -> 1, l -> 0 ],

equal = [
	() -> [ () -> 1, l -> 0 ],
	(a,as) -> [ (b,bs) -> and (eq a b) (equal as bs), () -> 0]
],

concat = [
	() -> v -> v,
	(h,t) -> v -> (h, concat t v)
],

reverse = [
	() -> (),
	(h,t) -> concat (reverse t) (h,())
],

map = f -> [
	() -> (),
	(h,t) -> (f h, map f t)
],

filter = f -> [
	() -> (),
	(h,t) -> if (f h) (h, filter f t) (filter f t)
],

foldr = f -> acc -> [
	() -> acc,
	(h,t) -> f h (foldr f acc t)
],

foldl = f -> acc -> [
	() -> acc,
	(h,t) -> foldl f (f acc h) t
],

sum = foldr add 0,
product = foldr mul 1,

orList = foldr or 0,
andList = foldr and 1,

any = f -> l -> orList (map f l),
all = f -> l -> andList (map f l),
none = f -> l -> not (any f l),

zipWith = f -> [
	()		-> b -> (),
	(a,as)	-> [
		()		-> (),
		(b,bs)	-> (f a b, zipWith f as bs)
	]
],

zip = zipWith cons,

take = [
	0 -> l -> (),
	n -> [
		() -> (),
		(h,t) -> (h, (take (pred n) t))
	]
],

drop = [
	0 -> l -> l,
	n -> [
		() -> (),
		(h,t) -> drop (pred n) t
	]
],

dropWhile = f -> [
	() -> (),
	(x,xs) -> if (f x)
		(dropWhile f xs)
		(x,xs)
],

takeWhile = f -> [
	() -> (),
	(x,xs) -> if (f x)
		(x, takeWhile f xs)
		()
],

split = p -> 
	foldr
	[ x -> (ts, fs) -> if (p x) ((x,ts), fs) (ts, (x,fs)) ]
	((),()),

flatten = foldr concat (),

range = a -> b ->
	if (lte a b)
		(a, range (succ a) b)
		(),

sort = [
	() -> (),
	(x,xs) -> concat (sort < filter (gt x) < xs) (x, sort < filter (lte x) < xs)
],

-- Infinite lists

iterate = f -> x -> (x, iterate f (f x)),
downfrom = iterate pred,
upfrom = iterate succ,
repeat = iterate id,

-- Some arithmetics

divides = n -> eq 0 . mod n,
divisors = n -> filter (divides n) < range 1 n,

isPrime = n -> range 2 (sqrt n) > none (divides n) > and (gte n 2),
primes = upfrom 1 > filter isPrime,
fibonacci = concat {1,1} (zipWith add fibonacci (tail fibonacci))

in