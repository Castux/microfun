module

-- Functions

id = x -> x,
compose = f -> g -> x -> f (g x),
flip = f -> x -> y -> f y x,
curry = f -> x -> y -> f (x,y),
uncurry = f -> (x,y) -> f x y,
const = c -> x -> c,

-- Tuples

first = (a,b) -> a,
second = (a,b) -> b,

-- Numbers
-- builtin: add, mul, sub, div, mod, sqrt

succ = add 1,
pred = sub 1,
minus = n -> sub n 0,
abs = n -> if (lt 0 n) (minus n) n,
max = a -> b -> if (lt a b) a b,
min = a -> b -> if (lt a b) b a,

-- Booleans

if = cond -> t -> f -> cond > [ 1 -> t, 0 -> f ],

ifs = l -> else ->
	l > filter first > map second >  [
		(first,rest) -> first,
		() -> else
	],

and = a -> b -> if a b 0,
or = a -> b -> if a 1 b,
not = [ 0 -> 1, 1 -> 0 ],

-- Comparisons
-- builtin: eq, lt

neq = a -> b -> not (eq a b),
gte = a -> b -> not (lt a b),
gt = a -> b -> not (lte a b),
lte = a -> b -> or (lt a b) (eq a b),

-- Lists

cons = h -> t -> (h,t),

isList = [
	() -> 1,
	(x,xs) -> isList xs,
	n -> 0
],

length = [
	() -> 0,
	(h,t) -> succ (length t)
],

head = (h,t) -> h,
tail = (h,t) -> t,

empty = [ () -> 1, l -> 0 ],

concat = [
	() -> v -> v,
	(h,t) -> v -> (h, concat t v)
],

remove = e -> [
	() -> (),
	(h,t) -> if (equal e h) t (h, remove e t)
],

reverse = foldl (flip cons) {},

map = f -> [
	() -> (),
	(h,t) -> (f h, map f t)
],

filter = f -> [
	() -> (),
	(h,t) -> if (f h) (h, filter f t) (filter f t)
],

foldr = f -> acc -> [
	() -> acc,
	(h,t) -> f h (foldr f acc t)
],

foldl = f -> acc -> [
	() -> acc,
	(h,t) -> foldl f (f acc h) t
],

sum = foldr add 0,
product = foldr mul 1,

orList = foldr or 0,
andList = foldr and 1,

any = f -> l -> orList (map f l),
all = f -> l -> andList (map f l),
none = f -> l -> not (any f l),

zipWith = f -> [
	()		-> b -> (),
	(a,as)	-> [
		()		-> (),
		(b,bs)	-> (f a b, zipWith f as bs)
	]
],

zip = zipWith cons,

take = [
	0 -> l -> (),
	n -> [
		() -> (),
		(h,t) -> (h, (take (pred n) t))
	]
],

drop = [
	0 -> l -> l,
	n -> [
		() -> (),
		(h,t) -> drop (pred n) t
	]
],

dropWhile = f -> [
	() -> (),
	(x,xs) -> if (f x)
		(dropWhile f xs)
		(x,xs)
],

takeWhile = f -> [
	() -> (),
	(x,xs) -> if (f x)
		(x, takeWhile f xs)
		()
],

split = p ->
	foldr
	[ x -> (ts, fs) -> if (p x) ((x,ts), fs) (ts, (x,fs)) ]
	((),()),

flatten = foldr concat (),

range = a -> b ->
	if (lte b a)
		(a, range (succ a) b)
		(),

sortWith = f -> [
	() -> (),
	(x,xs) -> split (f x) xs > [
		(low,high) -> concat (sortWith f low) (x, sortWith f high)
	]
],

sort = sortWith lt,

pairs = [
	() -> (),
	(h,t) -> concat (map (cons h) t) (pairs t)
],

contains = elem -> any (equal elem),

-- Infinite lists

iterate = f -> x -> (x, iterate f (f x)),
downFrom = iterate pred,
upFrom = iterate succ,
repeat = iterate id,

-- Strings

join = separator -> [
	() -> (),
	(h,t) -> t > [
		() -> h,
		t2 -> concat h (concat separator (join separator t2))
	]
],

toString =
	let
		tupleToList = [
			() -> {},
			(a,b) -> {a,b},
			(a,b,c) -> {a,b,c},
			(a,b,c,d) -> {a,b,c,d},
			(a,b,c,d,e) -> {a,b,c,d,e},
			(a,b,c,d,e,f) -> {a,b,c,d,e,f},
			(a,b,c,d,e,f,g) -> {a,b,c,d,e,f,g},
			(a,b,c,d,e,f,g,h) -> {a,b,c,d,e,f,g,h},
			(a,b,c,d,e,f,g,h,i) -> {a,b,c,d,e,f,g,h,i},
			(a,b,c,d,e,f,g,h,i,j) -> {a,b,c,d,e,f,g,h,i,j},
			n -> n
		],

		numberToString = n ->
			let
				digit = {n > mod 10 > add (head '0')}
			in
				ifs {
					(lt 0 n, concat '-' (numberToString (minus n))),
					(lt 10 n, digit)
				}	(concat (numberToString (div 10 n)) digit),


		listToString = l ->
			flatten {'{', l > map toString > join ',', '}'},

		tupleToString = t ->
			let
				asList = tupleToList t
			in
				if (isList asList)
					(flatten {'(', asList > map toString > join ',', ')'})
					(numberToString asList)
	in
		x -> if (isList x) (listToString x) (tupleToString x)
