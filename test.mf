let

divides = n -> eq 0 . mod n,
divisors = n -> filter (divides n) < range 1 n,

isPrime = n -> range 2 (sqrt n) > none (divides n) > and (gte n 2),
primes = upfrom 1 > filter isPrime,

primes2 =
	let
		isPrime = n -> primes2 > takeWhile (flip lte (sqrt n)) > none (divides n),
		primesUpFrom = n -> if (isPrime n)
			(n, primesUpFrom (add 2 n))
			(primesUpFrom (add 2 n))
	in
		(2, primesUpFrom 3)



in

map show < take 500 < primes
