import prelude in

module

tree = a -> left -> right -> (a,left,right),

isTree = [
	() -> 1,
	(a,left,right) -> and (isTree left) (isTree right),
	x -> 0
],

treeFold = f -> i -> [
	() -> i,
	(e,l,r) -> f e (treeFold f i l) (treeFold f i r)
],

treeSize = treeFold (e -> l -> r -> succ (add l r)) 0,
treeHeight = treeFold (x -> l -> r -> succ (max l r)) 0,
treeToList = treeFold (e -> l -> r -> concat l (e, r)) (),
treeMap = f -> treeFold (e -> l -> r -> tree (f e) l r) (),

treeInsertBy = comp -> new -> [
	() -> tree new () (),
	(e,l,r) -> if (comp new e)
		(tree e (treeInsertBy comp new l) r)
		(tree e l (treeInsertBy comp new r))
],

treeInsert = treeInsertBy lt,
treeFromList = foldr treeInsert ()
