-- rules are in the form (state, symbol, newState, newSymbol, direction)


let
	null = 0,
	nulls = (null, nulls),
	emptyTape = (nulls, null, nulls),
	flattenTape = (left,current,right) ->
		flatten {
			left > takeWhile (neq null) > reverse,
			{current},
			right > takeWhile (neq null)
		},

	currentSymbol = (left,current,right) -> current,

	writeSymbol = newSymbol -> (left, current, right) ->
		(left, newSymbol, right),

	shiftRight = (left, current, right) ->
		((current,left), head right, tail right),

	shiftLeft = tape -> let
		reverse = (l,c,r) -> (r,c,l)
	in
		tape > reverse > shiftRight > reverse,

	findRule = rules -> state -> symbol ->
		rules
			> filter ((st,sym,a,b,c) -> and (eq st state) (eq sym symbol))
			> [
				() -> (),
				(h,t) -> h
			],

	step = rules -> (state, tape) -> let
		c = currentSymbol tape,
		rule = findRule rules state c
	in
		rule > [
			() -> (),
			(state, symbol, newState, newSymbol, direction) -> let
				newTape = tape > writeSymbol newSymbol > (if (gt 0 direction) shiftRight shiftLeft)
			in
				(newState, newTape)
		],

	run = rules -> start ->
		iterate (step rules) start
			> takeWhile (not . empty)
			> map ((state, tape) -> join ": " {toString state, toString < flattenTape tape})


in let
	rules = {
		(0, null, 1, 5, 1),
		(1, null, 2, 5, 1),
		(2, null, 3, 10, 1)
	},
	start = (0, emptyTape)
in
	run rules start > map showt > eval
